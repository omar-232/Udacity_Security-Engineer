>> Issue: [B703:django_mark_safe] Potential XSS on mark_safe function.
   Location: SampleCode/create_customer.py:24
   Relevant: OWASP Top 10: A7: Cross-Site Scripting (XSS)
   Severity type:  Critical
23	        self.password = hashlib.md5(password.encode('utf-8')).hexdigest()
24	        self.banner = safestring.mark_safe(banner)
25	
Recommendation: 
- Use the 'escape' filter instead of 'mark_safe' to prevent XSS attacks. See Django's built-in
*for more information:
-https://docs.djangoproject.com/en/3.2/ref/templates/builtins/#built-in-filter-reference
--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'mysecurepassword'
   Location: SampleCode/init_db.py:14
   Relevant: OWASP Top 10: A6: Security Misconfiguration
   Severity type: High
13	    def open(self):
14	    self.conn = psycopg2.connect(user = "webappuser",
15	                                    password = "mysecurepassword",
16	                                    host = "localhost",
17	                                    port = "5432",
18	                                    database = "website")
19	        self.cursor = self.conn.cursor()
Recommendation:
- Store sensitive information like passwords in a secure manner, such as using environment variables or a secure key store
* for more information:
- https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration/
--------------------------------------------------
>> Issue: [B320:blacklist] Using lxml.etree.fromstring to parse untrusted XML data is known to be vulnerable to XML attacks. Replace lxml.etree.fromstring with its defusedxml equivalent function.
   Location: SampleCode/fix_customer_orders.py:11
   Relevant: OWASP Top 10: A4: XML External Entities (XXE)
   Severity type: High
10	def customerOrdersXML():
11	    root = lxml.etree.fromstring(xmlString)
12	    root = fromstring(xmlString)
Recommendation: 
-Use the defusedxml library instead of lxml.etree.fromstring to parse untrusted XML data. 
-https://cheatsheetseries.owasp.org/cheatsheets/XML_Security_Cheat_Sheet.html
-https://github.com/PyCQA/bandit
-https://bandit.readthedocs.io/en/latest/blacklists/blacklist_imports.html#b320-using-lxml-etree-fromstring-to-parse-untrusted-xml-data-is-known-to-be-vulnerable-to-xml-attacks-replace-  lxml-etree-fromstring-with-its-defusedxml-equivalent-function
--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Location: SampleCode/onLogin.py:8
   Relevant: OWASP Top 10: A9: Using Components with Known Vulnerabilities
   Severity: High
7	    def process(self, user, startupcmd):
8	        p = subprocess.Popen([startupcmd], stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
9	        r = p.communicate()[0]
Recommendation: 
-Use proper input validation and sanitization techniques to prevent command injection attacks. Use the subprocess module in Python with the shell=False argument to avoid command            injection vulnerabilities. 
-https://owasp.org/www-community/attacks/Command_Injection
-https://flake8.pycqa.org/en/latest/user/error-codes.html#id77
-https://github.com/PyCQA/scip/blob/master/guides/subprocess.rst
--------------------------------------------------
	>> Issue: [B404:blacklist] Consider possible security implications associated with subprocess module.
  	   Location: SampleCode/onLogin.py:1
   	   Relevant: OWASP Top 10: NEEDMOREINFO
  	   Severity type: NEEDMOREINFO
 	1	import os, sys, subprocess
	2	
	3	class userLogin():
	4	    def __init__(self):
	 Recommendation: 
 	 -Avoid using untrusted user input directly in a subprocess call. Use subprocess.run() instead of subprocess.Popen() to mitigate command injection attacks. 
 	 -https://cheatsheetseries.owasp.org/cheatsheets/Command_Injection_Prevention_Cheat_Sheet.html
 	 -https://flake8.pycqa.org/en/latest/user/error-codes.html#id72
 	 -https://docs.python.org/3/library/subprocess.html
--------------------------------------------------
Issue: [B404:blacklist] & Issue: [B603:subprocess_without_shell_equals_true]
These two issues are related to the use of the subprocess module in onLogin.py and the potential for injection attacks. It is recommended to review and update the code to mitigate these issues.
--------------------------------------------------
--------------------------------------------------
>> Issue: [B303:blacklist] Use of insecure MD2, MD4, MD5, or SHA1 hash function.
   Location: SampleCode/create_customer.py:23
   Relevant: OWASP Top 10: A3: Broken Authentication and Session Management
   Severity type: Medium
22	        self.email = email
23	        self.password = hashlib.md5(password.encode('utf-8')).hexdigest()
24	        self.banner = safestring.mark_safe(banner)

Recommendation: 
-Use a stronger hash function such as SHA-256 or bcrypt.
*for more information:
-https://cheatsheetseries.owasp.org/cheatsheets/Password_Storage_Cheat_Sheet.html
--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Location: SampleCode/init_db.py:40
   Relevant: OWASP Top 10: NEEDMOREINFO
   Severity type: Low (NEEDMOREINFO)
39	        letters = string.ascii_lowercase
40	        result_str = ''.join(random.choice(letters) for i in range(length))
41	        return result_str
Recommendation: 
- Use a secure random number generator such as os.urandom() or secrets.token_bytes() instead of random.choice().
-https://cheatsheetseries.owasp.org/cheatsheets/Cryptographic_Storage_Cheat_Sheet.html
-https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b311-standard-pseudo-random-generators-are-not-suitable-for-security-cryptographic-purposes-use-os-urandom-or-  systemrandom-instead
-https://docs.python.org/3/library/secrets.html
--------------------------------------------------